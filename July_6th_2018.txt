sudo wget https://stanfordnlp.github.io/CoreNLP/index.html#download

/home/sai1/examples/stanford-corenlp-full-2016-10-31

edu/stanford/nlp/models/pos-tagger/english-left3words/english-left3words-distsim.tagger


/home/sai1/examples/stanford-corenlp-full-2016-10-31/edu/stanford/nlp/models/pos-tagger/english-left3words/english-left3words-distsim.tagger


os.environ['STANFORD_PARSER'] = '/home/sai1/examples/stanfordparser_3.9/stanford-parser-full-2018-02-27'
os.environ['STANFORD_MODELS'] = '/home/sai1/examples/stanfordparser_3.9/stanford-parser-full-2018-02-27'




import nltk
import os

os.environ['STANFORD_PARSER'] = '/home/sai1/examples/stanfordparser_3.9/stanford-parser-full-2018-02-27'
os.environ['STANFORD_MODELS'] = '/home/sai1/examples/stanfordparser_3.9/stanford-parser-full-2018-02-27'
from nltk.parse.stanford import StanfordParser
from nltk.tree import ParentedTree, Tree

parser = StanfordParser()

# Parse the example sentence
sent = 'The hotel is located in USA'

t = list(parser.raw_parse(sent))[0]
t = ParentedTree.convert(t)

#parser = nltk.RegexpParser(grammar)
#t = parser.parse(nltk.pos_tag(words))

def find_subject(t):
    for s in t.subtrees(lambda t: t.label() == 'NP'):
        for n in s.subtrees(lambda n: n.label().startswith('NN')):
            return (n[0], find_attrs(n))

def find_predicate(t):
    v = None
	
for s in t.subtrees(lambda t: t.label() == 'VP'):
    for n in s.subtrees(lambda n: n.label().startswith('VB')):
        v = n
    return (v[0], find_attrs(v))

def find_object(t):
    for s in t.subtrees(lambda t: t.label() == 'VP'):
        for n in s.subtrees(lambda n: n.label() in ['NP', 'PP', 'ADJP']):
            if n.label() in ['NP', 'PP']:
                for c in n.subtrees(lambda c: c.label().startswith('NN')):
                    return (c[0], find_attrs(c))
            else:
                for c in n.subtrees(lambda c: c.label().startswith('JJ')):
                    return (c[0], find_attrs(c))
					
def find_attrs(node):
    attrs = []
    p = node.parent()

    # Search siblings
    if node.label().startswith('JJ'):
        for s in p:
            if s.label() == 'RB':
                attrs.append(s[0])

    elif node.label().startswith('NN'):
        for s in p:
            if s.label() in ['DT','PRP$','POS','JJ','CD','ADJP','QP','NP']:
                attrs.append(' '.join(s.flatten()))

    elif node.label().startswith('VB'):
        for s in p:
            if s.label() == 'ADVP':
                attrs.append(' '.join(s.flatten()))
				
				

    # Search uncles
    if node.label().startswith('JJ') or node.label().startswith('NN'):
        for s in p.parent():
            if s != p and s.label() == 'PP':
                attrs.append(' '.join(s.flatten()))

    elif node.label().startswith('VB'):
        for s in p.parent():
            if s != p and s.label().startswith('VB'):
                attrs.append(s[0])

    return attrs

print find_subject(t)
print find_predicate(t)
print find_object(t)









































====================================================================================================================================================



import nltk
import os
import re

os.environ['STANFORD_PARSER'] = '/home/sai1/examples/stanfordparser_3.9/stanford-parser-full-2018-02-27'
os.environ['STANFORD_MODELS'] = '/home/sai1/examples/stanfordparser_3.9/stanford-parser-full-2018-02-27'
from nltk.parse.stanford import StanfordParser
from nltk.tree import ParentedTree, Tree

parser = StanfordParser()

# Parse the example sentence
sent = 'The hotel is located in USA'

t = list(parser.raw_parse(sent))[0]
t = ParentedTree.convert(t)
t.pretty_print()

#parser = nltk.RegexpParser(grammar)
#t = parser.parse(nltk.pos_tag(words))

def find_subject(t):
    for s in t.subtrees(lambda t: t.label() == 'NP'):
        for n in s.subtrees(lambda n: n.label().startswith('NN')):
            return (n[0], find_attrs(n))

def find_predicate(t):
    v = None

    for s in t.subtrees(lambda t: t.label() == 'VP'):
        for n in s.subtrees(lambda n: n.label().startswith('VB')):
		      v = n
        return (v[0], find_attrs(v))

def find_object(t):
    for s in t.subtrees(lambda t: t.label() == 'VP'):
        for n in s.subtrees(lambda n: n.label() in ['NP', 'PP', 'ADJP']):
            if n.label() in ['NP', 'PP']:
                for c in n.subtrees(lambda c: c.label().startswith('NN')):
                    return (c[0], find_attrs(c))
            else:
                for c in n.subtrees(lambda c: c.label().startswith('JJ')):
                    return (c[0], find_attrs(c))


def find_attrs(node):
    attrs = []
    p = node.parent()

    # Search siblings
    if node.label().startswith('JJ'):
        for s in p:
            if s.label() == 'RB':
                attrs.append(s[0])

    elif node.label().startswith('NN'):
        for s in p:
            if s.label() in ['DT','PRP$','POS','JJ','CD','ADJP','QP','NP']:
                attrs.append(' '.join(s.flatten()))
				
	   elif node.label().startswith('VB'):
        for s in p:
            if s.label() == 'ADVP':
                attrs.append(' '.join(s.flatten()))

    # Search uncles
    if node.label().startswith('JJ') or node.label().startswith('NN'):
        for s in p.parent():
            if s != p and s.label() == 'PP':
                attrs.append(' '.join(s.flatten()))

    elif node.label().startswith('VB'):
        for s in p.parent():
            if s != p and s.label().startswith('VB'):
                attrs.append(s[0])

    return attrs

x = find_subject(t)

for s in x:
   p = re.sub('[^ a-zA-Z0-9]', '', s)
   repls = {'u' : '', '' : '',  '[]' : ''}
   reduce(lambda a, kv: a.replace(*kv), repls.iteritems(), p)
   
   
   

print("subject is--> ", x)


#print find_predicate(t)
#print find_object(t)



for s in verb_ss:
   p = re.sub('[^ a-zA-Z0-9]', '', s)
   repls = {'NN' : '', 'DY' : '',  'JJ' : '', 'NN' : '' ,'IN' : '', 'VB' : '','VBZ' :'', 'VBD' :'', 'VP' : '', 'P' : '','S' : '', 'Z' : '', 'D' : ''}
   reduce(lambda a, kv: a.replace(*kv), repls.iteritems(), p)



   
   

for i in k:
    print("subject is -->"+ i)
	

====================================================================================================================================================================

